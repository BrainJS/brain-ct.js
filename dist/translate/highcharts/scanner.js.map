{"version":3,"sources":["../../../src/translate/highcharts/scanner.js"],"names":["results","options","informAboutDependencies","generateOptions","console","log","data","title","text","boost","useGPUTranslations","enabled","chart","width","height","type","plotOptions","series","animation","xAxis","min","max","outputs","length","tickInterval","gridLineWidth","yAxis","inputs","legend","layout","align","verticalAlign","tooltip","pointFormatter","x","y","outputData","coerceAllToNearest","array","toNearest","multiplier","map","Math","round","c","o","oIndex","id","name","showInLegend","concat","reduce","agg","result","forEach","input","inputNumber","output","outputNumber","aggIndex","linkedTo","boostThreshold","marker","radius","push"],"mappings":"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","file":"scanner.js","sourcesContent":["function informAboutDependencies(){\n  console.log(`For Brain-CT Scanner, ensure you are including Highcharts and, for better performance, the boost module, e.g. \n    <script src=\"https://code.highcharts.com/highcharts.js\"></script>\n    <script src=\"https://code.highcharts.com/modules/boost-canvas.js\"></script>\n    <script src=\"https://code.highcharts.com/modules/boost.js\"></script>\nYou can find more information Highcharts and this module at https://www.highcharts.com/`);\n}\n\nexport default function (results, options) {\n  informAboutDependencies();\n  return generateOptions(results, options)\n}\n\nfunction generateOptions(data, options){\n  return {\n    title: { text: 'Neural Net CT Scan' },\n    boost: {\n      useGPUTranslations: true,\n      enabled: true,\n    },\n    chart: {\n      width: 1000,\n      height: 750,\n      type: 'scatter',\n    },\n    plotOptions: {\n      series: {\n        animation: false,\n      }\n    },\n    xAxis: {\n      title: { text: 'Output' },\n      min: 0,\n      max: data[0].outputs.length,\n      tickInterval: 1,\n      gridLineWidth: 1,\n    },\n    yAxis: {\n      title: { text: 'Input' },\n      min: 0,\n      max: data[0].inputs.length,\n      tickInterval: 1,\n      gridLineWidth: 1,\n    },\n    legend: {\n      layout: 'vertical',\n      align: 'left',\n      verticalAlign: 'top',\n    },\n    tooltip: {\n      pointFormatter: function(){\n        return `<b>Output:</b> ${this.x % 1}<br /><b>Input:</b> ${this.y %1}`\n      }\n    },\n    series: outputData(data)\n  }\n}\n\nfunction coerceAllToNearest(array, options) {\n  options = options || {};\n  if (!options.toNearest) return array;\n  const multiplier = 1 / options.toNearest;\n  return array.map(c => Math.round(c * multiplier) / multiplier);\n}\n\nfunction outputData(results, options) {\n  /**\n   * results = [{ inputs: [], outputs: []}]\n   * @type {Array}\n   */\n  options = options || {};\n\n  return results[0].outputs.map((o, oIndex) => ({\n    id: `output${oIndex}`,\n    name: `All Output ${oIndex}`,\n    showInLegend: true,\n  })).concat(results.reduce((agg, result) => {\n    result.inputs.forEach((input, inputNumber) => {\n      result.outputs.forEach((output, outputNumber) => {\n        const aggIndex = inputNumber + (outputNumber * result.inputs.length);\n        agg[aggIndex] = agg[aggIndex] || {\n          linkedTo: `output${outputNumber}`,\n          showInLegend: true,\n          name: `Output ${outputNumber} - Input ${inputNumber}`,\n          data: [],\n          type: 'scatter',\n          boostThreshold: 1,\n          marker: {\n            radius: 0.3\n          }\n        };\n        const x = output + outputNumber;\n        const y = input + inputNumber;\n        agg[aggIndex].data.push([x,y]);\n      })\n    });\n    return agg;\n  }, []));\n}"]}